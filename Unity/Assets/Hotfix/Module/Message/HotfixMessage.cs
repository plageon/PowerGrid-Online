// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Messages
  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    /// <summary>
    /// 帐号
    /// </summary>
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TestHotfixMessage : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TestHotfixMessage> _parser = new pb::MessageParser<G2C_TestHotfixMessage>(() => (G2C_TestHotfixMessage)MessagePool.Instance.Fetch(typeof(G2C_TestHotfixMessage)));
    public static pb::MessageParser<G2C_TestHotfixMessage> Parser { get { return _parser; } }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2M_TestGetReadyRequest : pb::IMessage {
    private static readonly pb::MessageParser<M2M_TestGetReadyRequest> _parser = new pb::MessageParser<M2M_TestGetReadyRequest>(() => (M2M_TestGetReadyRequest)MessagePool.Instance.Fetch(typeof(M2M_TestGetReadyRequest)));
    public static pb::MessageParser<M2M_TestGetReadyRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2M_TestGetReadyResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2M_TestGetReadyResponse> _parser = new pb::MessageParser<M2M_TestGetReadyResponse>(() => (M2M_TestGetReadyResponse)MessagePool.Instance.Fetch(typeof(M2M_TestGetReadyResponse)));
    public static pb::MessageParser<M2M_TestGetReadyResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestActorRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestActorRequest> _parser = new pb::MessageParser<C2M_TestActorRequest>(() => (C2M_TestActorRequest)MessagePool.Instance.Fetch(typeof(C2M_TestActorRequest)));
    public static pb::MessageParser<C2M_TestActorRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestActorResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestActorResponse> _parser = new pb::MessageParser<M2C_TestActorResponse>(() => (M2C_TestActorResponse)MessagePool.Instance.Fetch(typeof(M2C_TestActorResponse)));
    public static pb::MessageParser<M2C_TestActorResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerInfo> _parser = new pb::MessageParser<C2G_PlayerInfo>(() => (C2G_PlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_PlayerInfo)));
    public static pb::MessageParser<C2G_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerInfo> _parser = new pb::MessageParser<G2C_PlayerInfo>(() => (G2C_PlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_PlayerInfo)));
    public static pb::MessageParser<G2C_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.PlayerInfo playerInfo_;
    public global::ETHotfix.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_testRepeatedString_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> testRepeatedString_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TestRepeatedString {
      get { return testRepeatedString_; }
      set { testRepeatedString_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_testRepeatedInt32_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> testRepeatedInt32_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestRepeatedInt32 {
      get { return testRepeatedInt32_; }
      set { testRepeatedInt32_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_testRepeatedInt64_codec
        = pb::FieldCodec.ForInt64(42);
    private pbc::RepeatedField<long> testRepeatedInt64_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TestRepeatedInt64 {
      get { return testRepeatedInt64_; }
      set { testRepeatedInt64_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      testRepeatedString_.WriteTo(output, _repeated_testRepeatedString_codec);
      testRepeatedInt32_.WriteTo(output, _repeated_testRepeatedInt32_codec);
      testRepeatedInt64_.WriteTo(output, _repeated_testRepeatedInt64_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += testRepeatedString_.CalculateSize(_repeated_testRepeatedString_codec);
      size += testRepeatedInt32_.CalculateSize(_repeated_testRepeatedInt32_codec);
      size += testRepeatedInt64_.CalculateSize(_repeated_testRepeatedInt64_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      testRepeatedString_.Clear();
      testRepeatedInt32_.Clear();
      testRepeatedInt64_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 26: {
            testRepeatedString_.AddEntriesFrom(input, _repeated_testRepeatedString_codec);
            break;
          }
          case 34:
          case 32: {
            testRepeatedInt32_.AddEntriesFrom(input, _repeated_testRepeatedInt32_codec);
            break;
          }
          case 42:
          case 40: {
            testRepeatedInt64_.AddEntriesFrom(input, _repeated_testRepeatedInt64_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_TestHelloMsg : pb::IMessage {
    private static readonly pb::MessageParser<C2R_TestHelloMsg> _parser = new pb::MessageParser<C2R_TestHelloMsg>(() => (C2R_TestHelloMsg)MessagePool.Instance.Fetch(typeof(C2R_TestHelloMsg)));
    public static pb::MessageParser<C2R_TestHelloMsg> Parser { get { return _parser; } }

    private string sayMessage_ = "";
    public string SayMessage {
      get { return sayMessage_; }
      set {
        sayMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SayMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SayMessage);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SayMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SayMessage);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      sayMessage_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SayMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_TestRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2R_TestRequest> _parser = new pb::MessageParser<C2R_TestRequest>(() => (C2R_TestRequest)MessagePool.Instance.Fetch(typeof(C2R_TestRequest)));
    public static pb::MessageParser<C2R_TestRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 730: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_TestResponse : pb::IMessage {
    private static readonly pb::MessageParser<R2C_TestResponse> _parser = new pb::MessageParser<R2C_TestResponse>(() => (R2C_TestResponse)MessagePool.Instance.Fetch(typeof(R2C_TestResponse)));
    public static pb::MessageParser<R2C_TestResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(240, 5);
        output.WriteInt64(Key);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      address_ = "";
      key_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 746: {
            Address = input.ReadString();
            break;
          }
          case 752: {
            Key = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_AuctionRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_AuctionRequest> _parser = new pb::MessageParser<C2M_AuctionRequest>(() => (C2M_AuctionRequest)MessagePool.Instance.Fetch(typeof(C2M_AuctionRequest)));
    public static pb::MessageParser<C2M_AuctionRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int plantId_;
    public int PlantId {
      get { return plantId_; }
      set {
        plantId_ = value;
      }
    }

    private bool isPassed_;
    public bool IsPassed {
      get { return isPassed_; }
      set {
        isPassed_ = value;
      }
    }

    private int bid_;
    public int Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (IsPassed != false) {
        output.WriteRawTag(216, 5);
        output.WriteBool(IsPassed);
      }
      if (Bid != 0) {
        output.WriteRawTag(224, 5);
        output.WriteInt32(Bid);
      }
      if (PlantId != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(PlantId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (PlantId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PlantId);
      }
      if (IsPassed != false) {
        size += 2 + 1;
      }
      if (Bid != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Bid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      isPassed_ = false;
      bid_ = 0;
      plantId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            IsPassed = input.ReadBool();
            break;
          }
          case 736: {
            Bid = input.ReadInt32();
            break;
          }
          case 744: {
            PlantId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AuctionResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AuctionResponse> _parser = new pb::MessageParser<M2C_AuctionResponse>(() => (M2C_AuctionResponse)MessagePool.Instance.Fetch(typeof(M2C_AuctionResponse)));
    public static pb::MessageParser<M2C_AuctionResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AuctionReminder : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AuctionReminder> _parser = new pb::MessageParser<M2C_AuctionReminder>(() => (M2C_AuctionReminder)MessagePool.Instance.Fetch(typeof(M2C_AuctionReminder)));
    public static pb::MessageParser<M2C_AuctionReminder> Parser { get { return _parser; } }

    private int nowPrice_;
    public int NowPrice {
      get { return nowPrice_; }
      set {
        nowPrice_ = value;
      }
    }

    private int nowPlantId_;
    public int NowPlantId {
      get { return nowPlantId_; }
      set {
        nowPlantId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private bool isFinished_;
    public bool IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (NowPrice != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(NowPrice);
      }
      if (NowPlantId != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(NowPlantId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (IsFinished != false) {
        output.WriteRawTag(232, 5);
        output.WriteBool(IsFinished);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (NowPrice != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NowPrice);
      }
      if (NowPlantId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NowPlantId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (IsFinished != false) {
        size += 2 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      nowPrice_ = 0;
      nowPlantId_ = 0;
      message_ = "";
      isFinished_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            NowPrice = input.ReadInt32();
            break;
          }
          case 728: {
            NowPlantId = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            IsFinished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GiveupPlant : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GiveupPlant> _parser = new pb::MessageParser<M2C_GiveupPlant>(() => (M2C_GiveupPlant)MessagePool.Instance.Fetch(typeof(M2C_GiveupPlant)));
    public static pb::MessageParser<M2C_GiveupPlant> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 730: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GiveupPlant : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GiveupPlant> _parser = new pb::MessageParser<C2M_GiveupPlant>(() => (C2M_GiveupPlant)MessagePool.Instance.Fetch(typeof(C2M_GiveupPlant)));
    public static pb::MessageParser<C2M_GiveupPlant> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int giveupPlantId_;
    public int GiveupPlantId {
      get { return giveupPlantId_; }
      set {
        giveupPlantId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (GiveupPlantId != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(GiveupPlantId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (GiveupPlantId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GiveupPlantId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      giveupPlantId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            GiveupPlantId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_RefreshMarket : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RefreshMarket> _parser = new pb::MessageParser<C2M_RefreshMarket>(() => (C2M_RefreshMarket)MessagePool.Instance.Fetch(typeof(C2M_RefreshMarket)));
    public static pb::MessageParser<C2M_RefreshMarket> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int replacePlant_;
    public int ReplacePlant {
      get { return replacePlant_; }
      set {
        replacePlant_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ReplacePlant != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(ReplacePlant);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ReplacePlant != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ReplacePlant);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      replacePlant_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ReplacePlant = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_RefreshMarket : pb::IMessage {
    private static readonly pb::MessageParser<M2C_RefreshMarket> _parser = new pb::MessageParser<M2C_RefreshMarket>(() => (M2C_RefreshMarket)MessagePool.Instance.Fetch(typeof(M2C_RefreshMarket)));
    public static pb::MessageParser<M2C_RefreshMarket> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_marketPlants_codec
        = pb::FieldCodec.ForInt32(746);
    private pbc::RepeatedField<int> marketPlants_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> MarketPlants {
      get { return marketPlants_; }
      set { marketPlants_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      marketPlants_.WriteTo(output, _repeated_marketPlants_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += marketPlants_.CalculateSize(_repeated_marketPlants_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      marketPlants_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 746:
          case 744: {
            marketPlants_.AddEntriesFrom(input, _repeated_marketPlants_codec);
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InitAuction : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InitAuction> _parser = new pb::MessageParser<M2C_InitAuction>(() => (M2C_InitAuction)MessagePool.Instance.Fetch(typeof(M2C_InitAuction)));
    public static pb::MessageParser<M2C_InitAuction> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_marketPlants_codec
        = pb::FieldCodec.ForInt32(746);
    private pbc::RepeatedField<int> marketPlants_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> MarketPlants {
      get { return marketPlants_; }
      set { marketPlants_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(Message);
      }
      marketPlants_.WriteTo(output, _repeated_marketPlants_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += marketPlants_.CalculateSize(_repeated_marketPlants_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      marketPlants_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            Message = input.ReadString();
            break;
          }
          case 746:
          case 744: {
            marketPlants_.AddEntriesFrom(input, _repeated_marketPlants_codec);
            break;
          }
        }
      }
    }

  }

  public partial class M2C_FinishAuction : pb::IMessage {
    private static readonly pb::MessageParser<M2C_FinishAuction> _parser = new pb::MessageParser<M2C_FinishAuction>(() => (M2C_FinishAuction)MessagePool.Instance.Fetch(typeof(M2C_FinishAuction)));
    public static pb::MessageParser<M2C_FinishAuction> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_StartGameBroadCast : pb::IMessage {
    private static readonly pb::MessageParser<M2C_StartGameBroadCast> _parser = new pb::MessageParser<M2C_StartGameBroadCast>(() => (M2C_StartGameBroadCast)MessagePool.Instance.Fetch(typeof(M2C_StartGameBroadCast)));
    public static pb::MessageParser<M2C_StartGameBroadCast> Parser { get { return _parser; } }

    private int playerNum_;
    public int PlayerNum {
      get { return playerNum_; }
      set {
        playerNum_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PlayerNum);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (PlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlayerNum);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerNum_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerNum = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_AskBid : pb::IMessage {
    private static readonly pb::MessageParser<M2C_AskBid> _parser = new pb::MessageParser<M2C_AskBid>(() => (M2C_AskBid)MessagePool.Instance.Fetch(typeof(M2C_AskBid)));
    public static pb::MessageParser<M2C_AskBid> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_OwnPlant : pb::IMessage {
    private static readonly pb::MessageParser<M2C_OwnPlant> _parser = new pb::MessageParser<M2C_OwnPlant>(() => (M2C_OwnPlant)MessagePool.Instance.Fetch(typeof(M2C_OwnPlant)));
    public static pb::MessageParser<M2C_OwnPlant> Parser { get { return _parser; } }

    private int ownerId_;
    public int OwnerId {
      get { return ownerId_; }
      set {
        ownerId_ = value;
      }
    }

    private int plantId_;
    public int PlantId {
      get { return plantId_; }
      set {
        plantId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int maxPrice_;
    public int MaxPrice {
      get { return maxPrice_; }
      set {
        maxPrice_ = value;
      }
    }

    private bool isFinished_;
    public bool IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (OwnerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OwnerId);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (MaxPrice != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxPrice);
      }
      if (PlantId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PlantId);
      }
      if (IsFinished != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFinished);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (OwnerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OwnerId);
      }
      if (PlantId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlantId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (MaxPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPrice);
      }
      if (IsFinished != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      ownerId_ = 0;
      message_ = "";
      maxPrice_ = 0;
      plantId_ = 0;
      isFinished_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OwnerId = input.ReadInt32();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 24: {
            MaxPrice = input.ReadInt32();
            break;
          }
          case 32: {
            PlantId = input.ReadInt32();
            break;
          }
          case 40: {
            IsFinished = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_BuyResourceRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_BuyResourceRequest> _parser = new pb::MessageParser<C2M_BuyResourceRequest>(() => (C2M_BuyResourceRequest)MessagePool.Instance.Fetch(typeof(C2M_BuyResourceRequest)));
    public static pb::MessageParser<C2M_BuyResourceRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int coal_;
    public int Coal {
      get { return coal_; }
      set {
        coal_ = value;
      }
    }

    private int oil_;
    public int Oil {
      get { return oil_; }
      set {
        oil_ = value;
      }
    }

    private int garbage_;
    public int Garbage {
      get { return garbage_; }
      set {
        garbage_ = value;
      }
    }

    private int nuclear_;
    public int Nuclear {
      get { return nuclear_; }
      set {
        nuclear_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coal);
      }
      if (Oil != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Oil);
      }
      if (Garbage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Garbage);
      }
      if (Nuclear != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Nuclear);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Coal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coal);
      }
      if (Oil != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oil);
      }
      if (Garbage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Garbage);
      }
      if (Nuclear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nuclear);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coal_ = 0;
      oil_ = 0;
      garbage_ = 0;
      nuclear_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coal = input.ReadInt32();
            break;
          }
          case 16: {
            Oil = input.ReadInt32();
            break;
          }
          case 24: {
            Garbage = input.ReadInt32();
            break;
          }
          case 32: {
            Nuclear = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BuyResourceResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BuyResourceResponse> _parser = new pb::MessageParser<M2C_BuyResourceResponse>(() => (M2C_BuyResourceResponse)MessagePool.Instance.Fetch(typeof(M2C_BuyResourceResponse)));
    public static pb::MessageParser<M2C_BuyResourceResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ResourceReminder : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ResourceReminder> _parser = new pb::MessageParser<M2C_ResourceReminder>(() => (M2C_ResourceReminder)MessagePool.Instance.Fetch(typeof(M2C_ResourceReminder)));
    public static pb::MessageParser<M2C_ResourceReminder> Parser { get { return _parser; } }

    private int coal_;
    public int Coal {
      get { return coal_; }
      set {
        coal_ = value;
      }
    }

    private int oil_;
    public int Oil {
      get { return oil_; }
      set {
        oil_ = value;
      }
    }

    private int garbage_;
    public int Garbage {
      get { return garbage_; }
      set {
        garbage_ = value;
      }
    }

    private int nuclear_;
    public int Nuclear {
      get { return nuclear_; }
      set {
        nuclear_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Coal != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Coal);
      }
      if (Oil != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Oil);
      }
      if (Garbage != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Garbage);
      }
      if (Nuclear != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Nuclear);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Coal != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coal);
      }
      if (Oil != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oil);
      }
      if (Garbage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Garbage);
      }
      if (Nuclear != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Nuclear);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      coal_ = 0;
      oil_ = 0;
      garbage_ = 0;
      nuclear_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Coal = input.ReadInt32();
            break;
          }
          case 16: {
            Oil = input.ReadInt32();
            break;
          }
          case 24: {
            Garbage = input.ReadInt32();
            break;
          }
          case 32: {
            Nuclear = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_ResourceMarketFinish : pb::IMessage {
    private static readonly pb::MessageParser<M2C_ResourceMarketFinish> _parser = new pb::MessageParser<M2C_ResourceMarketFinish>(() => (M2C_ResourceMarketFinish)MessagePool.Instance.Fetch(typeof(M2C_ResourceMarketFinish)));
    public static pb::MessageParser<M2C_ResourceMarketFinish> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_RefreshResourceMarket : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RefreshResourceMarket> _parser = new pb::MessageParser<C2M_RefreshResourceMarket>(() => (C2M_RefreshResourceMarket)MessagePool.Instance.Fetch(typeof(C2M_RefreshResourceMarket)));
    public static pb::MessageParser<C2M_RefreshResourceMarket> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_InitLayingCircuit : pb::IMessage {
    private static readonly pb::MessageParser<M2C_InitLayingCircuit> _parser = new pb::MessageParser<M2C_InitLayingCircuit>(() => (M2C_InitLayingCircuit)MessagePool.Instance.Fetch(typeof(M2C_InitLayingCircuit)));
    public static pb::MessageParser<M2C_InitLayingCircuit> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_FinishLayingCircuit : pb::IMessage {
    private static readonly pb::MessageParser<M2C_FinishLayingCircuit> _parser = new pb::MessageParser<M2C_FinishLayingCircuit>(() => (M2C_FinishLayingCircuit)MessagePool.Instance.Fetch(typeof(M2C_FinishLayingCircuit)));
    public static pb::MessageParser<M2C_FinishLayingCircuit> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_RefreshPipelineMarket : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RefreshPipelineMarket> _parser = new pb::MessageParser<C2M_RefreshPipelineMarket>(() => (C2M_RefreshPipelineMarket)MessagePool.Instance.Fetch(typeof(C2M_RefreshPipelineMarket)));
    public static pb::MessageParser<C2M_RefreshPipelineMarket> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_LayingCircuitReminder : pb::IMessage {
    private static readonly pb::MessageParser<M2C_LayingCircuitReminder> _parser = new pb::MessageParser<M2C_LayingCircuitReminder>(() => (M2C_LayingCircuitReminder)MessagePool.Instance.Fetch(typeof(M2C_LayingCircuitReminder)));
    public static pb::MessageParser<M2C_LayingCircuitReminder> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_BuyLineRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_BuyLineRequest> _parser = new pb::MessageParser<C2M_BuyLineRequest>(() => (C2M_BuyLineRequest)MessagePool.Instance.Fetch(typeof(C2M_BuyLineRequest)));
    public static pb::MessageParser<C2M_BuyLineRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string city1_ = "";
    public string City1 {
      get { return city1_; }
      set {
        city1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string city2_ = "";
    public string City2 {
      get { return city2_; }
      set {
        city2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int price_;
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (City1.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(City1);
      }
      if (City2.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(City2);
      }
      if (Price != 0) {
        output.WriteRawTag(232, 5);
        output.WriteInt32(Price);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (City1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(City1);
      }
      if (City2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(City2);
      }
      if (Price != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      city1_ = "";
      city2_ = "";
      price_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 730: {
            City1 = input.ReadString();
            break;
          }
          case 738: {
            City2 = input.ReadString();
            break;
          }
          case 744: {
            Price = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BuyLineResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BuyLineResponse> _parser = new pb::MessageParser<M2C_BuyLineResponse>(() => (M2C_BuyLineResponse)MessagePool.Instance.Fetch(typeof(M2C_BuyLineResponse)));
    public static pb::MessageParser<M2C_BuyLineResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string boughtcity_ = "";
    public string Boughtcity {
      get { return boughtcity_; }
      set {
        boughtcity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (Boughtcity.Length != 0) {
        output.WriteRawTag(234, 5);
        output.WriteString(Boughtcity);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Boughtcity.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Boughtcity);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      boughtcity_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 746: {
            Boughtcity = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_QuitBuyLine : pb::IMessage {
    private static readonly pb::MessageParser<C2M_QuitBuyLine> _parser = new pb::MessageParser<C2M_QuitBuyLine>(() => (C2M_QuitBuyLine)MessagePool.Instance.Fetch(typeof(C2M_QuitBuyLine)));
    public static pb::MessageParser<C2M_QuitBuyLine> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_CityOwnerUpdate : pb::IMessage {
    private static readonly pb::MessageParser<M2C_CityOwnerUpdate> _parser = new pb::MessageParser<M2C_CityOwnerUpdate>(() => (M2C_CityOwnerUpdate)MessagePool.Instance.Fetch(typeof(M2C_CityOwnerUpdate)));
    public static pb::MessageParser<M2C_CityOwnerUpdate> Parser { get { return _parser; } }

    private string cityName_ = "";
    public string CityName {
      get { return cityName_; }
      set {
        cityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string owner_ = "";
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CityName.Length != 0) {
        output.WriteRawTag(210, 5);
        output.WriteString(CityName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(218, 5);
        output.WriteString(Owner);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CityName.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CityName);
      }
      if (Owner.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      cityName_ = "";
      owner_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 722: {
            CityName = input.ReadString();
            break;
          }
          case 730: {
            Owner = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GenerateEleRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GenerateEleRequest> _parser = new pb::MessageParser<C2M_GenerateEleRequest>(() => (C2M_GenerateEleRequest)MessagePool.Instance.Fetch(typeof(C2M_GenerateEleRequest)));
    public static pb::MessageParser<C2M_GenerateEleRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int totReward_;
    public int TotReward {
      get { return totReward_; }
      set {
        totReward_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (TotReward != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotReward);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TotReward != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotReward);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      totReward_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 16: {
            TotReward = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GenerateEleResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GenerateEleResponse> _parser = new pb::MessageParser<M2C_GenerateEleResponse>(() => (M2C_GenerateEleResponse)MessagePool.Instance.Fetch(typeof(M2C_GenerateEleResponse)));
    public static pb::MessageParser<M2C_GenerateEleResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      rpcId_ = 0;
      error_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_FinishRound : pb::IMessage {
    private static readonly pb::MessageParser<M2C_FinishRound> _parser = new pb::MessageParser<M2C_FinishRound>(() => (M2C_FinishRound)MessagePool.Instance.Fetch(typeof(M2C_FinishRound)));
    public static pb::MessageParser<M2C_FinishRound> Parser { get { return _parser; } }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
